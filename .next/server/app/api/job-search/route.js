"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/job-search/route";
exports.ids = ["app/api/job-search/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_raviporuri_raviporuri_website_app_api_job_search_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/job-search/route.ts */ \"(rsc)/./app/api/job-search/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/job-search/route\",\n        pathname: \"/api/job-search\",\n        filename: \"route\",\n        bundlePath: \"app/api/job-search/route\"\n    },\n    resolvedPagePath: \"/Users/raviporuri/raviporuri-website/app/api/job-search/route.ts\",\n    nextConfigOutput,\n    userland: _Users_raviporuri_raviporuri_website_app_api_job_search_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/job-search/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZqb2Itc2VhcmNoJTJGcm91dGUmcGFnZT0lMkZhcGklMkZqb2Itc2VhcmNoJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGam9iLXNlYXJjaCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJhdmlwb3J1cmklMkZyYXZpcG9ydXJpLXdlYnNpdGUlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcmF2aXBvcnVyaSUyRnJhdmlwb3J1cmktd2Vic2l0ZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZ0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXZpLWFpLWNhcmVlci1wbGF0Zm9ybS8/MmIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvcmF2aXBvcnVyaS9yYXZpcG9ydXJpLXdlYnNpdGUvYXBwL2FwaS9qb2Itc2VhcmNoL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9qb2Itc2VhcmNoL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvam9iLXNlYXJjaFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvam9iLXNlYXJjaC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9yYXZpcG9ydXJpL3Jhdmlwb3J1cmktd2Vic2l0ZS9hcHAvYXBpL2pvYi1zZWFyY2gvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2pvYi1zZWFyY2gvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/job-search/route.ts":
/*!*************************************!*\
  !*** ./app/api/job-search/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n\nconst anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.ANTHROPIC_API_KEY\n});\n// Rate limiting tracking\nlet jsearchRequestCount = 0;\nlet glassdoorRequestCount = 0;\n// LinkedIn Job Search API integration - DISABLED (subscription required)\nasync function searchLinkedInJobs(params) {\n    console.log(\"LinkedIn Jobs API disabled - requires paid subscription\");\n    return [];\n}\n// RemoteOK API integration\nasync function searchRemoteOK(params) {\n    try {\n        const response = await fetch(\"https://remoteok.io/api\");\n        const data = await response.json();\n        if (!Array.isArray(data)) return [];\n        // Filter by keywords and exclude the first item (usually metadata)\n        const jobs = data.slice(1).filter((job)=>{\n            if (!job.position) return false;\n            const keywords = params.keywords.toLowerCase();\n            const searchText = `${job.position} ${job.company} ${job.description || \"\"}`.toLowerCase();\n            return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n        });\n        return jobs.slice(0, 10).map((job)=>({\n                id: `remoteok-${job.id}`,\n                title: job.position,\n                company: job.company,\n                location: job.location || \"Remote\",\n                remote: true,\n                salary: job.salary_min && job.salary_max ? `$${Math.round(job.salary_min / 1000)}k - $${Math.round(job.salary_max / 1000)}k` : undefined,\n                description: job.description || \"\",\n                url: `https://remoteok.io/remote-jobs/${job.id}`,\n                source: \"RemoteOK\",\n                postedDate: new Date(job.date).toISOString()\n            }));\n    } catch (error) {\n        console.error(\"RemoteOK API error:\", error);\n        return [];\n    }\n}\n// Apify API integration - DISABLED (no successful actor runs found)\nasync function searchApify(params) {\n    console.log(\"Apify API disabled - no successful recent runs available\");\n    return [];\n}\n// Fantastic Jobs API integration - DISABLED (API endpoint returns 404)\nasync function searchFantasticJobs(params) {\n    console.log(\"Fantastic Jobs API disabled - endpoint returns 404\");\n    return [];\n}\n// Adzuna API integration\nasync function searchAdzuna(params) {\n    if (!process.env.ADZUNA_APP_ID || !process.env.ADZUNA_APP_KEY) {\n        console.log(\"Adzuna API credentials not configured\");\n        return [];\n    }\n    try {\n        const searchParams = new URLSearchParams({\n            app_id: process.env.ADZUNA_APP_ID,\n            app_key: process.env.ADZUNA_APP_KEY,\n            what: params.keywords,\n            where: params.location || \"United States\",\n            results_per_page: \"20\",\n            distance: \"50\"\n        });\n        const response = await fetch(`https://api.adzuna.com/v1/api/jobs/us/search/1?${searchParams}`);\n        const data = await response.json();\n        if (!data.results) return [];\n        return data.results.map((job)=>({\n                id: `adzuna-${job.id}`,\n                title: job.title,\n                company: job.company?.display_name || \"Unknown Company\",\n                location: job.location?.display_name || \"Location not specified\",\n                remote: job.title.toLowerCase().includes(\"remote\") || job.description.toLowerCase().includes(\"remote\"),\n                salary: job.salary_min && job.salary_max ? `$${Math.round(job.salary_min / 1000)}k - $${Math.round(job.salary_max / 1000)}k` : undefined,\n                description: job.description,\n                url: job.redirect_url,\n                source: \"Adzuna\",\n                postedDate: job.created\n            }));\n    } catch (error) {\n        console.error(\"Adzuna API error:\", error);\n        return [];\n    }\n}\n// Greenhouse API integration - Discovery mode\nasync function searchGreenhouse(params) {\n    // Use common tech company greenhouse boards - but this is just a sample\n    // In practice, we'd want to discover these dynamically\n    const knownBoards = [\n        \"databricks\",\n        \"snowflake\",\n        \"airbnb\",\n        \"stripe\",\n        \"openai\",\n        \"anthropic\",\n        \"cisco\",\n        \"nvidia\",\n        \"microsoft\",\n        \"google\",\n        \"meta\",\n        \"amazon\",\n        \"apple\",\n        \"uber\",\n        \"lyft\",\n        \"square\",\n        \"zoom\",\n        \"slack\",\n        \"figma\",\n        \"notion\",\n        \"coinbase\",\n        \"dropbox\",\n        \"twilio\",\n        \"github\",\n        \"atlassian\",\n        \"salesforce\",\n        \"mongodb\",\n        \"elastic\",\n        \"docker\",\n        \"hashicorp\",\n        \"datadog\",\n        \"pagerduty\",\n        \"segment\"\n    ];\n    const jobs = [];\n    // Sample from known boards, but filter by keywords after fetching\n    const sampleBoards = knownBoards.slice(0, 10) // Limit to avoid too many requests\n    ;\n    for (const company of sampleBoards){\n        try {\n            const response = await fetch(`https://boards-api.greenhouse.io/v1/boards/${company}/jobs`);\n            const data = await response.json();\n            if (data.jobs) {\n                const filteredJobs = data.jobs.filter((job)=>{\n                    const keywords = params.keywords.toLowerCase();\n                    const searchText = `${job.title} ${job.content || \"\"}`.toLowerCase();\n                    return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n                });\n                const companyJobs = filteredJobs.map((job)=>({\n                        id: `greenhouse-${job.id}`,\n                        title: job.title,\n                        company: company.charAt(0).toUpperCase() + company.slice(1),\n                        location: job.location?.name || \"Location not specified\",\n                        remote: job.title.toLowerCase().includes(\"remote\") || job.location?.name?.toLowerCase().includes(\"remote\") || job.content?.toLowerCase().includes(\"remote\"),\n                        description: job.content || \"\",\n                        url: job.absolute_url,\n                        source: \"Greenhouse\",\n                        postedDate: job.updated_at\n                    }));\n                jobs.push(...companyJobs.slice(0, 3)) // Limit per company\n                ;\n            }\n        } catch (error) {\n            console.error(`Greenhouse API error for ${company}:`, error);\n        }\n    }\n    return jobs.slice(0, 15) // Overall limit\n    ;\n}\n// Lever API integration - Discovery mode\nasync function searchLever(params) {\n    const knownLeverCompanies = [\n        \"netflix\",\n        \"uber\",\n        \"lyft\",\n        \"square\",\n        \"zoom\",\n        \"slack\",\n        \"figma\",\n        \"notion\",\n        \"coinbase\",\n        \"robinhood\",\n        \"palantir\",\n        \"postmates\",\n        \"canva\",\n        \"reddit\",\n        \"box\",\n        \"cloudflare\",\n        \"mixpanel\",\n        \"affirm\",\n        \"plaid\",\n        \"compass\"\n    ];\n    const jobs = [];\n    const sampleCompanies = knownLeverCompanies.slice(0, 8) // Limit requests\n    ;\n    for (const company of sampleCompanies){\n        try {\n            const response = await fetch(`https://api.lever.co/v0/postings/${company}?mode=json`);\n            const data = await response.json();\n            if (Array.isArray(data)) {\n                const filteredJobs = data.filter((job)=>{\n                    const keywords = params.keywords.toLowerCase();\n                    const searchText = `${job.text} ${job.description || \"\"}`.toLowerCase();\n                    return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n                });\n                const companyJobs = filteredJobs.map((job)=>({\n                        id: `lever-${job.id}`,\n                        title: job.text,\n                        company: company.charAt(0).toUpperCase() + company.slice(1),\n                        location: job.categories?.location || \"Location not specified\",\n                        remote: job.categories?.location?.toLowerCase().includes(\"remote\") || job.text?.toLowerCase().includes(\"remote\") || job.description?.toLowerCase().includes(\"remote\"),\n                        description: job.description || \"\",\n                        url: job.hostedUrl,\n                        source: \"Lever\",\n                        postedDate: job.createdAt\n                    }));\n                jobs.push(...companyJobs.slice(0, 2)) // Limit per company\n                ;\n            }\n        } catch (error) {\n            console.error(`Lever API error for ${company}:`, error);\n        }\n    }\n    return jobs.slice(0, 10) // Overall limit\n    ;\n}\n// AI-powered job scoring\nasync function scoreJobs(jobs, userProfile) {\n    if (!process.env.ANTHROPIC_API_KEY) {\n        return jobs.map((job)=>({\n                ...job,\n                relevanceScore: 50\n            }));\n    }\n    const scoringPrompt = `You are an expert career advisor analyzing job opportunities for a senior technology executive.\n\nUSER PROFILE:\n${userProfile}\n\nJOBS TO SCORE:\n${jobs.map((job, i)=>`\n${i + 1}. ${job.title} at ${job.company}\nLocation: ${job.location}\nDescription: ${job.description.substring(0, 500)}...\n`).join(\"\\n\")}\n\nFor each job, provide a relevance score (1-100) and 2-3 key match reasons. Consider:\n- Role seniority match\n- Technical skills alignment\n- Industry experience fit\n- Company stage/culture fit\n- Leadership scope match\n\nReturn ONLY a JSON array with this format:\n[\n  {\n    \"jobIndex\": 0,\n    \"score\": 85,\n    \"reasons\": [\"Matches senior data platform leadership experience\", \"Requires Snowflake/Databricks expertise\", \"Scaling team responsibilities align with background\"]\n  }\n]`;\n    try {\n        const response = await anthropic.messages.create({\n            model: \"claude-3-haiku-20240307\",\n            max_tokens: 2000,\n            temperature: 0.3,\n            messages: [\n                {\n                    role: \"user\",\n                    content: scoringPrompt\n                }\n            ]\n        });\n        const responseText = response.content[0].type === \"text\" ? response.content[0].text : \"\";\n        const scores = JSON.parse(responseText);\n        return jobs.map((job, index)=>{\n            const scoring = scores.find((s)=>s.jobIndex === index);\n            return {\n                ...job,\n                relevanceScore: scoring?.score || 50,\n                matchReasons: scoring?.reasons || []\n            };\n        }).sort((a, b)=>(b.relevanceScore || 0) - (a.relevanceScore || 0));\n    } catch (error) {\n        console.error(\"Job scoring error:\", error);\n        return jobs.map((job)=>({\n                ...job,\n                relevanceScore: 50\n            }));\n    }\n}\nasync function POST(request) {\n    try {\n        const params = await request.json();\n        if (!params.keywords) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Keywords are required\"\n            }, {\n                status: 400\n            });\n        }\n        // User profile for AI scoring\n        const userProfile = `Senior technology executive with 25+ years experience in data engineering, analytics, AI/ML, and cloud platforms. Currently Founder & AI Product Leader at Equiti Ventures. Previously Senior Director at Cisco, Global Head of Data at Dropbox. Expertise in scaling engineering teams (100+ people), building data platforms, and leading companies through IPO. Looking for C-level or senior leadership roles in technology, data, or AI companies.`;\n        // Aggregate jobs from multiple sources\n        const [linkedinJobs, remoteOKJobs, apifyJobs, fantasticJobs, adzunaJobs, greehouseJobs, leverJobs] = await Promise.all([\n            searchLinkedInJobs(params),\n            searchRemoteOK(params),\n            searchApify(params),\n            searchFantasticJobs(params),\n            searchAdzuna(params),\n            searchGreenhouse(params),\n            searchLever(params)\n        ]);\n        let allJobs = [\n            ...linkedinJobs,\n            ...remoteOKJobs,\n            ...apifyJobs,\n            ...fantasticJobs,\n            ...adzunaJobs,\n            ...greehouseJobs,\n            ...leverJobs\n        ];\n        // Filter by criteria\n        if (params.remote !== undefined) {\n            allJobs = allJobs.filter((job)=>job.remote === params.remote);\n        }\n        if (params.companies?.length) {\n            allJobs = allJobs.filter((job)=>params.companies.some((company)=>job.company.toLowerCase().includes(company.toLowerCase())));\n        }\n        if (params.excludeCompanies?.length) {\n            allJobs = allJobs.filter((job)=>!params.excludeCompanies.some((company)=>job.company.toLowerCase().includes(company.toLowerCase())));\n        }\n        // Remove duplicates by URL\n        const uniqueJobs = allJobs.filter((job, index, self)=>index === self.findIndex((j)=>j.url === job.url));\n        // Score jobs with AI\n        const scoredJobs = await scoreJobs(uniqueJobs, userProfile);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobs: scoredJobs,\n            total: scoredJobs.length,\n            sources: {\n                linkedin: linkedinJobs.length,\n                remoteok: remoteOKJobs.length,\n                apify: apifyJobs.length,\n                fantastic: fantasticJobs.length,\n                adzuna: adzunaJobs.length,\n                greenhouse: greehouseJobs.length,\n                lever: leverJobs.length\n            },\n            apiUsage: {\n                linkedin: {\n                    used: jsearchRequestCount,\n                    remaining: Math.max(0, 200 - jsearchRequestCount),\n                    limit: 200\n                },\n                glassdoor: {\n                    used: glassdoorRequestCount,\n                    remaining: Math.max(0, 100 - glassdoorRequestCount),\n                    limit: 100\n                }\n            }\n        });\n    } catch (error) {\n        console.error(\"Job search error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to search jobs\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/job-search/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@anthropic-ai","vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();