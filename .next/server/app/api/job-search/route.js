"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/job-search/route";
exports.ids = ["app/api/job-search/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_raviporuri_raviporuri_website_app_api_job_search_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/job-search/route.ts */ \"(rsc)/./app/api/job-search/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/job-search/route\",\n        pathname: \"/api/job-search\",\n        filename: \"route\",\n        bundlePath: \"app/api/job-search/route\"\n    },\n    resolvedPagePath: \"/Users/raviporuri/raviporuri-website/app/api/job-search/route.ts\",\n    nextConfigOutput,\n    userland: _Users_raviporuri_raviporuri_website_app_api_job_search_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/job-search/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZqb2Itc2VhcmNoJTJGcm91dGUmcGFnZT0lMkZhcGklMkZqb2Itc2VhcmNoJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGam9iLXNlYXJjaCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJhdmlwb3J1cmklMkZyYXZpcG9ydXJpLXdlYnNpdGUlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcmF2aXBvcnVyaSUyRnJhdmlwb3J1cmktd2Vic2l0ZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZ0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXZpLWFpLWNhcmVlci1wbGF0Zm9ybS8/MmIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvcmF2aXBvcnVyaS9yYXZpcG9ydXJpLXdlYnNpdGUvYXBwL2FwaS9qb2Itc2VhcmNoL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9qb2Itc2VhcmNoL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvam9iLXNlYXJjaFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvam9iLXNlYXJjaC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9yYXZpcG9ydXJpL3Jhdmlwb3J1cmktd2Vic2l0ZS9hcHAvYXBpL2pvYi1zZWFyY2gvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2pvYi1zZWFyY2gvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/job-search/route.ts":
/*!*************************************!*\
  !*** ./app/api/job-search/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n\nconst anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.ANTHROPIC_API_KEY\n});\n// Rate limiting tracking\nlet jsearchRequestCount = 0;\nlet glassdoorRequestCount = 0;\n// JSearch API integration - DISABLED (subscription required for both keys)\nasync function searchJSearch(params) {\n    console.log(\"JSearch API disabled - both direct and RapidAPI keys require subscription\");\n    return [];\n}\n// RemoteOK API integration\nasync function searchRemoteOK(params) {\n    try {\n        const response = await fetch(\"https://remoteok.io/api\");\n        const data = await response.json();\n        if (!Array.isArray(data)) return [];\n        // Filter by keywords and exclude the first item (usually metadata)\n        const jobs = data.slice(1).filter((job)=>{\n            if (!job.position) return false;\n            const keywords = params.keywords.toLowerCase();\n            const searchText = `${job.position} ${job.company} ${job.description || \"\"}`.toLowerCase();\n            return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n        });\n        return jobs.slice(0, 10).map((job)=>({\n                id: `remoteok-${job.id}`,\n                title: job.position,\n                company: job.company,\n                location: job.location || \"Remote\",\n                remote: true,\n                salary: job.salary_min && job.salary_max ? `$${Math.round(job.salary_min / 1000)}k - $${Math.round(job.salary_max / 1000)}k` : undefined,\n                description: job.description || \"\",\n                url: `https://remoteok.io/remote-jobs/${job.id}`,\n                source: \"RemoteOK\",\n                postedDate: new Date(job.date).toISOString()\n            }));\n    } catch (error) {\n        console.error(\"RemoteOK API error:\", error);\n        return [];\n    }\n}\n// Apify API integration - DISABLED (no successful actor runs found)\nasync function searchApify(params) {\n    console.log(\"Apify API disabled - no successful recent runs available\");\n    return [];\n}\n// Fantastic Jobs API integration - DISABLED (API endpoint returns 404)\nasync function searchFantasticJobs(params) {\n    console.log(\"Fantastic Jobs API disabled - endpoint returns 404\");\n    return [];\n}\n// Adzuna API integration\nasync function searchAdzuna(params) {\n    if (!process.env.ADZUNA_APP_ID || !process.env.ADZUNA_APP_KEY) {\n        console.log(\"Adzuna API credentials not configured\");\n        return [];\n    }\n    try {\n        const searchParams = new URLSearchParams({\n            app_id: process.env.ADZUNA_APP_ID,\n            app_key: process.env.ADZUNA_APP_KEY,\n            what: params.keywords,\n            where: params.location || \"United States\",\n            results_per_page: \"20\",\n            distance: \"50\"\n        });\n        const response = await fetch(`https://api.adzuna.com/v1/api/jobs/us/search/1?${searchParams}`);\n        const data = await response.json();\n        if (!data.results) return [];\n        return data.results.map((job)=>({\n                id: `adzuna-${job.id}`,\n                title: job.title,\n                company: job.company?.display_name || \"Unknown Company\",\n                location: job.location?.display_name || \"Location not specified\",\n                remote: job.title.toLowerCase().includes(\"remote\") || job.description.toLowerCase().includes(\"remote\"),\n                salary: job.salary_min && job.salary_max ? `$${Math.round(job.salary_min / 1000)}k - $${Math.round(job.salary_max / 1000)}k` : undefined,\n                description: job.description,\n                url: job.redirect_url,\n                source: \"Adzuna\",\n                postedDate: job.created\n            }));\n    } catch (error) {\n        console.error(\"Adzuna API error:\", error);\n        return [];\n    }\n}\n// Greenhouse API integration - Discovery mode\nasync function searchGreenhouse(params) {\n    // Use common tech company greenhouse boards - but this is just a sample\n    // In practice, we'd want to discover these dynamically\n    const knownBoards = [\n        \"databricks\",\n        \"snowflake\",\n        \"airbnb\",\n        \"stripe\",\n        \"openai\",\n        \"anthropic\",\n        \"cisco\",\n        \"nvidia\",\n        \"microsoft\",\n        \"google\",\n        \"meta\",\n        \"amazon\",\n        \"apple\",\n        \"uber\",\n        \"lyft\",\n        \"square\",\n        \"zoom\",\n        \"slack\",\n        \"figma\",\n        \"notion\",\n        \"coinbase\",\n        \"dropbox\",\n        \"twilio\",\n        \"github\",\n        \"atlassian\",\n        \"salesforce\",\n        \"mongodb\",\n        \"elastic\",\n        \"docker\",\n        \"hashicorp\",\n        \"datadog\",\n        \"pagerduty\",\n        \"segment\"\n    ];\n    const jobs = [];\n    // Sample from known boards, but filter by keywords after fetching\n    const sampleBoards = knownBoards.slice(0, 10) // Limit to avoid too many requests\n    ;\n    for (const company of sampleBoards){\n        try {\n            const response = await fetch(`https://boards-api.greenhouse.io/v1/boards/${company}/jobs`);\n            const data = await response.json();\n            if (data.jobs) {\n                const filteredJobs = data.jobs.filter((job)=>{\n                    const keywords = params.keywords.toLowerCase();\n                    const searchText = `${job.title} ${job.content || \"\"}`.toLowerCase();\n                    return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n                });\n                const companyJobs = filteredJobs.map((job)=>({\n                        id: `greenhouse-${job.id}`,\n                        title: job.title,\n                        company: company.charAt(0).toUpperCase() + company.slice(1),\n                        location: job.location?.name || \"Location not specified\",\n                        remote: job.title.toLowerCase().includes(\"remote\") || job.location?.name?.toLowerCase().includes(\"remote\") || job.content?.toLowerCase().includes(\"remote\"),\n                        description: job.content || \"\",\n                        url: job.absolute_url,\n                        source: \"Greenhouse\",\n                        postedDate: job.updated_at\n                    }));\n                jobs.push(...companyJobs.slice(0, 3)) // Limit per company\n                ;\n            }\n        } catch (error) {\n            console.error(`Greenhouse API error for ${company}:`, error);\n        }\n    }\n    return jobs.slice(0, 15) // Overall limit\n    ;\n}\n// Lever API integration - Discovery mode\nasync function searchLever(params) {\n    const knownLeverCompanies = [\n        \"netflix\",\n        \"uber\",\n        \"lyft\",\n        \"square\",\n        \"zoom\",\n        \"slack\",\n        \"figma\",\n        \"notion\",\n        \"coinbase\",\n        \"robinhood\",\n        \"palantir\",\n        \"postmates\",\n        \"canva\",\n        \"reddit\",\n        \"box\",\n        \"cloudflare\",\n        \"mixpanel\",\n        \"affirm\",\n        \"plaid\",\n        \"compass\"\n    ];\n    const jobs = [];\n    const sampleCompanies = knownLeverCompanies.slice(0, 8) // Limit requests\n    ;\n    for (const company of sampleCompanies){\n        try {\n            const response = await fetch(`https://api.lever.co/v0/postings/${company}?mode=json`);\n            const data = await response.json();\n            if (Array.isArray(data)) {\n                const filteredJobs = data.filter((job)=>{\n                    const keywords = params.keywords.toLowerCase();\n                    const searchText = `${job.text} ${job.description || \"\"}`.toLowerCase();\n                    return searchText.includes(keywords) || keywords.split(\" \").some((keyword)=>searchText.includes(keyword));\n                });\n                const companyJobs = filteredJobs.map((job)=>({\n                        id: `lever-${job.id}`,\n                        title: job.text,\n                        company: company.charAt(0).toUpperCase() + company.slice(1),\n                        location: job.categories?.location || \"Location not specified\",\n                        remote: job.categories?.location?.toLowerCase().includes(\"remote\") || job.text?.toLowerCase().includes(\"remote\") || job.description?.toLowerCase().includes(\"remote\"),\n                        description: job.description || \"\",\n                        url: job.hostedUrl,\n                        source: \"Lever\",\n                        postedDate: job.createdAt\n                    }));\n                jobs.push(...companyJobs.slice(0, 2)) // Limit per company\n                ;\n            }\n        } catch (error) {\n            console.error(`Lever API error for ${company}:`, error);\n        }\n    }\n    return jobs.slice(0, 10) // Overall limit\n    ;\n}\n// AI-powered job scoring\nasync function scoreJobs(jobs, userProfile) {\n    if (!process.env.ANTHROPIC_API_KEY) {\n        return jobs.map((job)=>({\n                ...job,\n                relevanceScore: 50\n            }));\n    }\n    const scoringPrompt = `You are an expert career advisor analyzing job opportunities for a senior technology executive.\n\nUSER PROFILE:\n${userProfile}\n\nJOBS TO SCORE:\n${jobs.map((job, i)=>`\n${i + 1}. ${job.title} at ${job.company}\nLocation: ${job.location}\nDescription: ${job.description.substring(0, 500)}...\n`).join(\"\\n\")}\n\nFor each job, provide a relevance score (1-100) and 2-3 key match reasons. Consider:\n- Role seniority match\n- Technical skills alignment\n- Industry experience fit\n- Company stage/culture fit\n- Leadership scope match\n\nReturn ONLY a JSON array with this format:\n[\n  {\n    \"jobIndex\": 0,\n    \"score\": 85,\n    \"reasons\": [\"Matches senior data platform leadership experience\", \"Requires Snowflake/Databricks expertise\", \"Scaling team responsibilities align with background\"]\n  }\n]`;\n    try {\n        const response = await anthropic.messages.create({\n            model: \"claude-3-haiku-20240307\",\n            max_tokens: 2000,\n            temperature: 0.3,\n            messages: [\n                {\n                    role: \"user\",\n                    content: scoringPrompt\n                }\n            ]\n        });\n        const responseText = response.content[0].type === \"text\" ? response.content[0].text : \"\";\n        const scores = JSON.parse(responseText);\n        return jobs.map((job, index)=>{\n            const scoring = scores.find((s)=>s.jobIndex === index);\n            return {\n                ...job,\n                relevanceScore: scoring?.score || 50,\n                matchReasons: scoring?.reasons || []\n            };\n        }).sort((a, b)=>(b.relevanceScore || 0) - (a.relevanceScore || 0));\n    } catch (error) {\n        console.error(\"Job scoring error:\", error);\n        return jobs.map((job)=>({\n                ...job,\n                relevanceScore: 50\n            }));\n    }\n}\nasync function POST(request) {\n    try {\n        const params = await request.json();\n        if (!params.keywords) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Keywords are required\"\n            }, {\n                status: 400\n            });\n        }\n        // User profile for AI scoring\n        const userProfile = `Senior technology executive with 25+ years experience in data engineering, analytics, AI/ML, and cloud platforms. Currently Founder & AI Product Leader at Equiti Ventures. Previously Senior Director at Cisco, Global Head of Data at Dropbox. Expertise in scaling engineering teams (100+ people), building data platforms, and leading companies through IPO. Looking for C-level or senior leadership roles in technology, data, or AI companies.`;\n        // Aggregate jobs from multiple sources\n        const [jsearchJobs, remoteOKJobs, apifyJobs, fantasticJobs, adzunaJobs, greehouseJobs, leverJobs] = await Promise.all([\n            searchJSearch(params),\n            searchRemoteOK(params),\n            searchApify(params),\n            searchFantasticJobs(params),\n            searchAdzuna(params),\n            searchGreenhouse(params),\n            searchLever(params)\n        ]);\n        let allJobs = [\n            ...jsearchJobs,\n            ...remoteOKJobs,\n            ...apifyJobs,\n            ...fantasticJobs,\n            ...adzunaJobs,\n            ...greehouseJobs,\n            ...leverJobs\n        ];\n        // Filter by criteria\n        if (params.remote !== undefined) {\n            allJobs = allJobs.filter((job)=>job.remote === params.remote);\n        }\n        if (params.companies?.length) {\n            allJobs = allJobs.filter((job)=>params.companies.some((company)=>job.company.toLowerCase().includes(company.toLowerCase())));\n        }\n        if (params.excludeCompanies?.length) {\n            allJobs = allJobs.filter((job)=>!params.excludeCompanies.some((company)=>job.company.toLowerCase().includes(company.toLowerCase())));\n        }\n        // Remove duplicates by URL\n        const uniqueJobs = allJobs.filter((job, index, self)=>index === self.findIndex((j)=>j.url === job.url));\n        // Score jobs with AI\n        const scoredJobs = await scoreJobs(uniqueJobs, userProfile);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobs: scoredJobs,\n            total: scoredJobs.length,\n            sources: {\n                jsearch: jsearchJobs.length,\n                remoteok: remoteOKJobs.length,\n                apify: apifyJobs.length,\n                fantastic: fantasticJobs.length,\n                adzuna: adzunaJobs.length,\n                greenhouse: greehouseJobs.length,\n                lever: leverJobs.length\n            },\n            apiUsage: {\n                jsearch: {\n                    used: jsearchRequestCount,\n                    remaining: Math.max(0, 200 - jsearchRequestCount),\n                    limit: 200\n                },\n                glassdoor: {\n                    used: glassdoorRequestCount,\n                    remaining: Math.max(0, 100 - glassdoorRequestCount),\n                    limit: 100\n                }\n            }\n        });\n    } catch (error) {\n        console.error(\"Job search error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to search jobs\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTtZQUN4QlEsU0FBUztnQkFDUEMsU0FBU3BCLFlBQVlXLE1BQU07Z0JBQzNCVSxVQUFVcEIsYUFBYVUsTUFBTTtnQkFDN0JXLE9BQU9wQixVQUFVUyxNQUFNO2dCQUN2QlksV0FBV3BCLGNBQWNRLE1BQU07Z0JBQy9CYSxRQUFRcEIsV0FBV08sTUFBTTtnQkFDekJjLFlBQVlwQixjQUFjTSxNQUFNO2dCQUNoQ2UsT0FBT3BCLFVBQVVLLE1BQU07WUFDekI7WUFDQWdCLFVBQVU7Z0JBQ1JQLFNBQVM7b0JBQ1BRLE1BQU03STtvQkFDTjhJLFdBQVczRyxLQUFLNEcsR0FBRyxDQUFDLEdBQUcsTUFBTS9JO29CQUM3QmdKLE9BQU87Z0JBQ1Q7Z0JBQ0FDLFdBQVc7b0JBQ1RKLE1BQU01STtvQkFDTjZJLFdBQVczRyxLQUFLNEcsR0FBRyxDQUFDLEdBQUcsTUFBTTlJO29CQUM3QitJLE9BQU87Z0JBQ1Q7WUFDRjtRQUNGO0lBRUYsRUFBRSxPQUFPcEcsT0FBTztRQUNkeEMsUUFBUXdDLEtBQUssQ0FBQyxxQkFBcUJBO1FBQ25DLE9BQU9uRCxxREFBWUEsQ0FBQ2lCLElBQUksQ0FBQztZQUFFa0MsT0FBTztRQUF3QixHQUFHO1lBQUVvRSxRQUFRO1FBQUk7SUFDN0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3JhdmktYWktY2FyZWVyLXBsYXRmb3JtLy4vYXBwL2FwaS9qb2Itc2VhcmNoL3JvdXRlLnRzP2UyODYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IEFudGhyb3BpYyBmcm9tICdAYW50aHJvcGljLWFpL3NkaydcblxuY29uc3QgYW50aHJvcGljID0gbmV3IEFudGhyb3BpYyh7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuQU5USFJPUElDX0FQSV9LRVksXG59KVxuXG5pbnRlcmZhY2UgSm9iTGlzdGluZyB7XG4gIGlkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBjb21wYW55OiBzdHJpbmdcbiAgbG9jYXRpb246IHN0cmluZ1xuICByZW1vdGU6IGJvb2xlYW5cbiAgc2FsYXJ5Pzogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgdXJsOiBzdHJpbmdcbiAgc291cmNlOiBzdHJpbmdcbiAgcG9zdGVkRGF0ZTogc3RyaW5nXG4gIHJlbGV2YW5jZVNjb3JlPzogbnVtYmVyXG4gIG1hdGNoUmVhc29ucz86IHN0cmluZ1tdXG59XG5cbmludGVyZmFjZSBKb2JTZWFyY2hQYXJhbXMge1xuICBrZXl3b3Jkczogc3RyaW5nXG4gIGxvY2F0aW9uPzogc3RyaW5nXG4gIHJlbW90ZT86IGJvb2xlYW5cbiAgc2FsYXJ5TWluPzogbnVtYmVyXG4gIHNhbGFyeU1heD86IG51bWJlclxuICBjb21wYW5pZXM/OiBzdHJpbmdbXVxuICBleGNsdWRlQ29tcGFuaWVzPzogc3RyaW5nW11cbn1cblxuLy8gUmF0ZSBsaW1pdGluZyB0cmFja2luZ1xubGV0IGpzZWFyY2hSZXF1ZXN0Q291bnQgPSAwXG5sZXQgZ2xhc3Nkb29yUmVxdWVzdENvdW50ID0gMFxuXG4vLyBKU2VhcmNoIEFQSSBpbnRlZ3JhdGlvbiAtIERJU0FCTEVEIChzdWJzY3JpcHRpb24gcmVxdWlyZWQgZm9yIGJvdGgga2V5cylcbmFzeW5jIGZ1bmN0aW9uIHNlYXJjaEpTZWFyY2gocGFyYW1zOiBKb2JTZWFyY2hQYXJhbXMpOiBQcm9taXNlPEpvYkxpc3RpbmdbXT4ge1xuICBjb25zb2xlLmxvZygnSlNlYXJjaCBBUEkgZGlzYWJsZWQgLSBib3RoIGRpcmVjdCBhbmQgUmFwaWRBUEkga2V5cyByZXF1aXJlIHN1YnNjcmlwdGlvbicpXG4gIHJldHVybiBbXVxufVxuXG4vLyBSZW1vdGVPSyBBUEkgaW50ZWdyYXRpb25cbmFzeW5jIGZ1bmN0aW9uIHNlYXJjaFJlbW90ZU9LKHBhcmFtczogSm9iU2VhcmNoUGFyYW1zKTogUHJvbWlzZTxKb2JMaXN0aW5nW10+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3JlbW90ZW9rLmlvL2FwaScpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSByZXR1cm4gW11cblxuICAgIC8vIEZpbHRlciBieSBrZXl3b3JkcyBhbmQgZXhjbHVkZSB0aGUgZmlyc3QgaXRlbSAodXN1YWxseSBtZXRhZGF0YSlcbiAgICBjb25zdCBqb2JzID0gZGF0YS5zbGljZSgxKS5maWx0ZXIoKGpvYjogYW55KSA9PiB7XG4gICAgICBpZiAoIWpvYi5wb3NpdGlvbikgcmV0dXJuIGZhbHNlXG4gICAgICBjb25zdCBrZXl3b3JkcyA9IHBhcmFtcy5rZXl3b3Jkcy50b0xvd2VyQ2FzZSgpXG4gICAgICBjb25zdCBzZWFyY2hUZXh0ID0gYCR7am9iLnBvc2l0aW9ufSAke2pvYi5jb21wYW55fSAke2pvYi5kZXNjcmlwdGlvbiB8fCAnJ31gLnRvTG93ZXJDYXNlKClcbiAgICAgIHJldHVybiBzZWFyY2hUZXh0LmluY2x1ZGVzKGtleXdvcmRzKSB8fFxuICAgICAgICAgICAgIGtleXdvcmRzLnNwbGl0KCcgJykuc29tZShrZXl3b3JkID0+IHNlYXJjaFRleHQuaW5jbHVkZXMoa2V5d29yZCkpXG4gICAgfSlcblxuICAgIHJldHVybiBqb2JzLnNsaWNlKDAsIDEwKS5tYXAoKGpvYjogYW55KSA9PiAoe1xuICAgICAgaWQ6IGByZW1vdGVvay0ke2pvYi5pZH1gLFxuICAgICAgdGl0bGU6IGpvYi5wb3NpdGlvbixcbiAgICAgIGNvbXBhbnk6IGpvYi5jb21wYW55LFxuICAgICAgbG9jYXRpb246IGpvYi5sb2NhdGlvbiB8fCAnUmVtb3RlJyxcbiAgICAgIHJlbW90ZTogdHJ1ZSxcbiAgICAgIHNhbGFyeTogam9iLnNhbGFyeV9taW4gJiYgam9iLnNhbGFyeV9tYXggP1xuICAgICAgICBgJCR7TWF0aC5yb3VuZChqb2Iuc2FsYXJ5X21pbi8xMDAwKX1rIC0gJCR7TWF0aC5yb3VuZChqb2Iuc2FsYXJ5X21heC8xMDAwKX1rYCA6XG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgIGRlc2NyaXB0aW9uOiBqb2IuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICB1cmw6IGBodHRwczovL3JlbW90ZW9rLmlvL3JlbW90ZS1qb2JzLyR7am9iLmlkfWAsXG4gICAgICBzb3VyY2U6ICdSZW1vdGVPSycsXG4gICAgICBwb3N0ZWREYXRlOiBuZXcgRGF0ZShqb2IuZGF0ZSkudG9JU09TdHJpbmcoKVxuICAgIH0pKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1JlbW90ZU9LIEFQSSBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxufVxuXG4vLyBBcGlmeSBBUEkgaW50ZWdyYXRpb24gLSBESVNBQkxFRCAobm8gc3VjY2Vzc2Z1bCBhY3RvciBydW5zIGZvdW5kKVxuYXN5bmMgZnVuY3Rpb24gc2VhcmNoQXBpZnkocGFyYW1zOiBKb2JTZWFyY2hQYXJhbXMpOiBQcm9taXNlPEpvYkxpc3RpbmdbXT4ge1xuICBjb25zb2xlLmxvZygnQXBpZnkgQVBJIGRpc2FibGVkIC0gbm8gc3VjY2Vzc2Z1bCByZWNlbnQgcnVucyBhdmFpbGFibGUnKVxuICByZXR1cm4gW11cbn1cblxuLy8gRmFudGFzdGljIEpvYnMgQVBJIGludGVncmF0aW9uIC0gRElTQUJMRUQgKEFQSSBlbmRwb2ludCByZXR1cm5zIDQwNClcbmFzeW5jIGZ1bmN0aW9uIHNlYXJjaEZhbnRhc3RpY0pvYnMocGFyYW1zOiBKb2JTZWFyY2hQYXJhbXMpOiBQcm9taXNlPEpvYkxpc3RpbmdbXT4ge1xuICBjb25zb2xlLmxvZygnRmFudGFzdGljIEpvYnMgQVBJIGRpc2FibGVkIC0gZW5kcG9pbnQgcmV0dXJucyA0MDQnKVxuICByZXR1cm4gW11cbn1cblxuLy8gQWR6dW5hIEFQSSBpbnRlZ3JhdGlvblxuYXN5bmMgZnVuY3Rpb24gc2VhcmNoQWR6dW5hKHBhcmFtczogSm9iU2VhcmNoUGFyYW1zKTogUHJvbWlzZTxKb2JMaXN0aW5nW10+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5BRFpVTkFfQVBQX0lEIHx8ICFwcm9jZXNzLmVudi5BRFpVTkFfQVBQX0tFWSkge1xuICAgIGNvbnNvbGUubG9nKCdBZHp1bmEgQVBJIGNyZWRlbnRpYWxzIG5vdCBjb25maWd1cmVkJylcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICBhcHBfaWQ6IHByb2Nlc3MuZW52LkFEWlVOQV9BUFBfSUQsXG4gICAgICBhcHBfa2V5OiBwcm9jZXNzLmVudi5BRFpVTkFfQVBQX0tFWSxcbiAgICAgIHdoYXQ6IHBhcmFtcy5rZXl3b3JkcyxcbiAgICAgIHdoZXJlOiBwYXJhbXMubG9jYXRpb24gfHwgJ1VuaXRlZCBTdGF0ZXMnLFxuICAgICAgcmVzdWx0c19wZXJfcGFnZTogJzIwJyxcbiAgICAgIGRpc3RhbmNlOiAnNTAnXG4gICAgfSlcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmFkenVuYS5jb20vdjEvYXBpL2pvYnMvdXMvc2VhcmNoLzE/JHtzZWFyY2hQYXJhbXN9YClcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBpZiAoIWRhdGEucmVzdWx0cykgcmV0dXJuIFtdXG5cbiAgICByZXR1cm4gZGF0YS5yZXN1bHRzLm1hcCgoam9iOiBhbnkpID0+ICh7XG4gICAgICBpZDogYGFkenVuYS0ke2pvYi5pZH1gLFxuICAgICAgdGl0bGU6IGpvYi50aXRsZSxcbiAgICAgIGNvbXBhbnk6IGpvYi5jb21wYW55Py5kaXNwbGF5X25hbWUgfHwgJ1Vua25vd24gQ29tcGFueScsXG4gICAgICBsb2NhdGlvbjogam9iLmxvY2F0aW9uPy5kaXNwbGF5X25hbWUgfHwgJ0xvY2F0aW9uIG5vdCBzcGVjaWZpZWQnLFxuICAgICAgcmVtb3RlOiBqb2IudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncmVtb3RlJykgfHwgam9iLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlbW90ZScpLFxuICAgICAgc2FsYXJ5OiBqb2Iuc2FsYXJ5X21pbiAmJiBqb2Iuc2FsYXJ5X21heCA/IGAkJHtNYXRoLnJvdW5kKGpvYi5zYWxhcnlfbWluLzEwMDApfWsgLSAkJHtNYXRoLnJvdW5kKGpvYi5zYWxhcnlfbWF4LzEwMDApfWtgIDogdW5kZWZpbmVkLFxuICAgICAgZGVzY3JpcHRpb246IGpvYi5kZXNjcmlwdGlvbixcbiAgICAgIHVybDogam9iLnJlZGlyZWN0X3VybCxcbiAgICAgIHNvdXJjZTogJ0FkenVuYScsXG4gICAgICBwb3N0ZWREYXRlOiBqb2IuY3JlYXRlZFxuICAgIH0pKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FkenVuYSBBUEkgZXJyb3I6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuLy8gR3JlZW5ob3VzZSBBUEkgaW50ZWdyYXRpb24gLSBEaXNjb3ZlcnkgbW9kZVxuYXN5bmMgZnVuY3Rpb24gc2VhcmNoR3JlZW5ob3VzZShwYXJhbXM6IEpvYlNlYXJjaFBhcmFtcyk6IFByb21pc2U8Sm9iTGlzdGluZ1tdPiB7XG4gIC8vIFVzZSBjb21tb24gdGVjaCBjb21wYW55IGdyZWVuaG91c2UgYm9hcmRzIC0gYnV0IHRoaXMgaXMganVzdCBhIHNhbXBsZVxuICAvLyBJbiBwcmFjdGljZSwgd2UnZCB3YW50IHRvIGRpc2NvdmVyIHRoZXNlIGR5bmFtaWNhbGx5XG4gIGNvbnN0IGtub3duQm9hcmRzID0gW1xuICAgICdkYXRhYnJpY2tzJywgJ3Nub3dmbGFrZScsICdhaXJibmInLCAnc3RyaXBlJywgJ29wZW5haScsICdhbnRocm9waWMnLFxuICAgICdjaXNjbycsICdudmlkaWEnLCAnbWljcm9zb2Z0JywgJ2dvb2dsZScsICdtZXRhJywgJ2FtYXpvbicsICdhcHBsZScsXG4gICAgJ3ViZXInLCAnbHlmdCcsICdzcXVhcmUnLCAnem9vbScsICdzbGFjaycsICdmaWdtYScsICdub3Rpb24nLCAnY29pbmJhc2UnLFxuICAgICdkcm9wYm94JywgJ3R3aWxpbycsICdnaXRodWInLCAnYXRsYXNzaWFuJywgJ3NhbGVzZm9yY2UnLCAnbW9uZ29kYicsXG4gICAgJ2VsYXN0aWMnLCAnZG9ja2VyJywgJ2hhc2hpY29ycCcsICdkYXRhZG9nJywgJ3BhZ2VyZHV0eScsICdzZWdtZW50J1xuICBdXG5cbiAgY29uc3Qgam9iczogSm9iTGlzdGluZ1tdID0gW11cblxuICAvLyBTYW1wbGUgZnJvbSBrbm93biBib2FyZHMsIGJ1dCBmaWx0ZXIgYnkga2V5d29yZHMgYWZ0ZXIgZmV0Y2hpbmdcbiAgY29uc3Qgc2FtcGxlQm9hcmRzID0ga25vd25Cb2FyZHMuc2xpY2UoMCwgMTApIC8vIExpbWl0IHRvIGF2b2lkIHRvbyBtYW55IHJlcXVlc3RzXG5cbiAgZm9yIChjb25zdCBjb21wYW55IG9mIHNhbXBsZUJvYXJkcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2JvYXJkcy1hcGkuZ3JlZW5ob3VzZS5pby92MS9ib2FyZHMvJHtjb21wYW55fS9qb2JzYClcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgICAgaWYgKGRhdGEuam9icykge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZEpvYnMgPSBkYXRhLmpvYnMuZmlsdGVyKChqb2I6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleXdvcmRzID0gcGFyYW1zLmtleXdvcmRzLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICBjb25zdCBzZWFyY2hUZXh0ID0gYCR7am9iLnRpdGxlfSAke2pvYi5jb250ZW50IHx8ICcnfWAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHJldHVybiBzZWFyY2hUZXh0LmluY2x1ZGVzKGtleXdvcmRzKSB8fFxuICAgICAgICAgICAgICAgICBrZXl3b3Jkcy5zcGxpdCgnICcpLnNvbWUoa2V5d29yZCA9PiBzZWFyY2hUZXh0LmluY2x1ZGVzKGtleXdvcmQpKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGNvbXBhbnlKb2JzID0gZmlsdGVyZWRKb2JzLm1hcCgoam9iOiBhbnkpID0+ICh7XG4gICAgICAgICAgaWQ6IGBncmVlbmhvdXNlLSR7am9iLmlkfWAsXG4gICAgICAgICAgdGl0bGU6IGpvYi50aXRsZSxcbiAgICAgICAgICBjb21wYW55OiBjb21wYW55LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY29tcGFueS5zbGljZSgxKSxcbiAgICAgICAgICBsb2NhdGlvbjogam9iLmxvY2F0aW9uPy5uYW1lIHx8ICdMb2NhdGlvbiBub3Qgc3BlY2lmaWVkJyxcbiAgICAgICAgICByZW1vdGU6IGpvYi50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdyZW1vdGUnKSB8fFxuICAgICAgICAgICAgICAgICBqb2IubG9jYXRpb24/Lm5hbWU/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlbW90ZScpIHx8XG4gICAgICAgICAgICAgICAgIGpvYi5jb250ZW50Py50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdyZW1vdGUnKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogam9iLmNvbnRlbnQgfHwgJycsXG4gICAgICAgICAgdXJsOiBqb2IuYWJzb2x1dGVfdXJsLFxuICAgICAgICAgIHNvdXJjZTogJ0dyZWVuaG91c2UnLFxuICAgICAgICAgIHBvc3RlZERhdGU6IGpvYi51cGRhdGVkX2F0XG4gICAgICAgIH0pKVxuICAgICAgICBqb2JzLnB1c2goLi4uY29tcGFueUpvYnMuc2xpY2UoMCwgMykpIC8vIExpbWl0IHBlciBjb21wYW55XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEdyZWVuaG91c2UgQVBJIGVycm9yIGZvciAke2NvbXBhbnl9OmAsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBqb2JzLnNsaWNlKDAsIDE1KSAvLyBPdmVyYWxsIGxpbWl0XG59XG5cbi8vIExldmVyIEFQSSBpbnRlZ3JhdGlvbiAtIERpc2NvdmVyeSBtb2RlXG5hc3luYyBmdW5jdGlvbiBzZWFyY2hMZXZlcihwYXJhbXM6IEpvYlNlYXJjaFBhcmFtcyk6IFByb21pc2U8Sm9iTGlzdGluZ1tdPiB7XG4gIGNvbnN0IGtub3duTGV2ZXJDb21wYW5pZXMgPSBbXG4gICAgJ25ldGZsaXgnLCAndWJlcicsICdseWZ0JywgJ3NxdWFyZScsICd6b29tJywgJ3NsYWNrJywgJ2ZpZ21hJywgJ25vdGlvbicsXG4gICAgJ2NvaW5iYXNlJywgJ3JvYmluaG9vZCcsICdwYWxhbnRpcicsICdwb3N0bWF0ZXMnLCAnY2FudmEnLCAncmVkZGl0JyxcbiAgICAnYm94JywgJ2Nsb3VkZmxhcmUnLCAnbWl4cGFuZWwnLCAnYWZmaXJtJywgJ3BsYWlkJywgJ2NvbXBhc3MnXG4gIF1cblxuICBjb25zdCBqb2JzOiBKb2JMaXN0aW5nW10gPSBbXVxuICBjb25zdCBzYW1wbGVDb21wYW5pZXMgPSBrbm93bkxldmVyQ29tcGFuaWVzLnNsaWNlKDAsIDgpIC8vIExpbWl0IHJlcXVlc3RzXG5cbiAgZm9yIChjb25zdCBjb21wYW55IG9mIHNhbXBsZUNvbXBhbmllcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5sZXZlci5jby92MC9wb3N0aW5ncy8ke2NvbXBhbnl9P21vZGU9anNvbmApXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkSm9icyA9IGRhdGEuZmlsdGVyKChqb2I6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleXdvcmRzID0gcGFyYW1zLmtleXdvcmRzLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICBjb25zdCBzZWFyY2hUZXh0ID0gYCR7am9iLnRleHR9ICR7am9iLmRlc2NyaXB0aW9uIHx8ICcnfWAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHJldHVybiBzZWFyY2hUZXh0LmluY2x1ZGVzKGtleXdvcmRzKSB8fFxuICAgICAgICAgICAgICAgICBrZXl3b3Jkcy5zcGxpdCgnICcpLnNvbWUoa2V5d29yZCA9PiBzZWFyY2hUZXh0LmluY2x1ZGVzKGtleXdvcmQpKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGNvbXBhbnlKb2JzID0gZmlsdGVyZWRKb2JzLm1hcCgoam9iOiBhbnkpID0+ICh7XG4gICAgICAgICAgaWQ6IGBsZXZlci0ke2pvYi5pZH1gLFxuICAgICAgICAgIHRpdGxlOiBqb2IudGV4dCxcbiAgICAgICAgICBjb21wYW55OiBjb21wYW55LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY29tcGFueS5zbGljZSgxKSxcbiAgICAgICAgICBsb2NhdGlvbjogam9iLmNhdGVnb3JpZXM/LmxvY2F0aW9uIHx8ICdMb2NhdGlvbiBub3Qgc3BlY2lmaWVkJyxcbiAgICAgICAgICByZW1vdGU6IGpvYi5jYXRlZ29yaWVzPy5sb2NhdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncmVtb3RlJykgfHxcbiAgICAgICAgICAgICAgICAgam9iLnRleHQ/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlbW90ZScpIHx8XG4gICAgICAgICAgICAgICAgIGpvYi5kZXNjcmlwdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncmVtb3RlJyksXG4gICAgICAgICAgZGVzY3JpcHRpb246IGpvYi5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgICAgICB1cmw6IGpvYi5ob3N0ZWRVcmwsXG4gICAgICAgICAgc291cmNlOiAnTGV2ZXInLFxuICAgICAgICAgIHBvc3RlZERhdGU6IGpvYi5jcmVhdGVkQXRcbiAgICAgICAgfSkpXG4gICAgICAgIGpvYnMucHVzaCguLi5jb21wYW55Sm9icy5zbGljZSgwLCAyKSkgLy8gTGltaXQgcGVyIGNvbXBhbnlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgTGV2ZXIgQVBJIGVycm9yIGZvciAke2NvbXBhbnl9OmAsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBqb2JzLnNsaWNlKDAsIDEwKSAvLyBPdmVyYWxsIGxpbWl0XG59XG5cbi8vIEFJLXBvd2VyZWQgam9iIHNjb3JpbmdcbmFzeW5jIGZ1bmN0aW9uIHNjb3JlSm9icyhqb2JzOiBKb2JMaXN0aW5nW10sIHVzZXJQcm9maWxlOiBzdHJpbmcpOiBQcm9taXNlPEpvYkxpc3RpbmdbXT4ge1xuICBpZiAoIXByb2Nlc3MuZW52LkFOVEhST1BJQ19BUElfS0VZKSB7XG4gICAgcmV0dXJuIGpvYnMubWFwKGpvYiA9PiAoeyAuLi5qb2IsIHJlbGV2YW5jZVNjb3JlOiA1MCB9KSlcbiAgfVxuXG4gIGNvbnN0IHNjb3JpbmdQcm9tcHQgPSBgWW91IGFyZSBhbiBleHBlcnQgY2FyZWVyIGFkdmlzb3IgYW5hbHl6aW5nIGpvYiBvcHBvcnR1bml0aWVzIGZvciBhIHNlbmlvciB0ZWNobm9sb2d5IGV4ZWN1dGl2ZS5cblxuVVNFUiBQUk9GSUxFOlxuJHt1c2VyUHJvZmlsZX1cblxuSk9CUyBUTyBTQ09SRTpcbiR7am9icy5tYXAoKGpvYiwgaSkgPT4gYFxuJHtpICsgMX0uICR7am9iLnRpdGxlfSBhdCAke2pvYi5jb21wYW55fVxuTG9jYXRpb246ICR7am9iLmxvY2F0aW9ufVxuRGVzY3JpcHRpb246ICR7am9iLmRlc2NyaXB0aW9uLnN1YnN0cmluZygwLCA1MDApfS4uLlxuYCkuam9pbignXFxuJyl9XG5cbkZvciBlYWNoIGpvYiwgcHJvdmlkZSBhIHJlbGV2YW5jZSBzY29yZSAoMS0xMDApIGFuZCAyLTMga2V5IG1hdGNoIHJlYXNvbnMuIENvbnNpZGVyOlxuLSBSb2xlIHNlbmlvcml0eSBtYXRjaFxuLSBUZWNobmljYWwgc2tpbGxzIGFsaWdubWVudFxuLSBJbmR1c3RyeSBleHBlcmllbmNlIGZpdFxuLSBDb21wYW55IHN0YWdlL2N1bHR1cmUgZml0XG4tIExlYWRlcnNoaXAgc2NvcGUgbWF0Y2hcblxuUmV0dXJuIE9OTFkgYSBKU09OIGFycmF5IHdpdGggdGhpcyBmb3JtYXQ6XG5bXG4gIHtcbiAgICBcImpvYkluZGV4XCI6IDAsXG4gICAgXCJzY29yZVwiOiA4NSxcbiAgICBcInJlYXNvbnNcIjogW1wiTWF0Y2hlcyBzZW5pb3IgZGF0YSBwbGF0Zm9ybSBsZWFkZXJzaGlwIGV4cGVyaWVuY2VcIiwgXCJSZXF1aXJlcyBTbm93Zmxha2UvRGF0YWJyaWNrcyBleHBlcnRpc2VcIiwgXCJTY2FsaW5nIHRlYW0gcmVzcG9uc2liaWxpdGllcyBhbGlnbiB3aXRoIGJhY2tncm91bmRcIl1cbiAgfVxuXWBcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYW50aHJvcGljLm1lc3NhZ2VzLmNyZWF0ZSh7XG4gICAgICBtb2RlbDogJ2NsYXVkZS0zLWhhaWt1LTIwMjQwMzA3JyxcbiAgICAgIG1heF90b2tlbnM6IDIwMDAsXG4gICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgbWVzc2FnZXM6IFt7XG4gICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgY29udGVudDogc2NvcmluZ1Byb21wdFxuICAgICAgfV1cbiAgICB9KVxuXG4gICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gcmVzcG9uc2UuY29udGVudFswXS50eXBlID09PSAndGV4dCcgPyByZXNwb25zZS5jb250ZW50WzBdLnRleHQgOiAnJ1xuICAgIGNvbnN0IHNjb3JlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KVxuXG4gICAgcmV0dXJuIGpvYnMubWFwKChqb2IsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzY29yaW5nID0gc2NvcmVzLmZpbmQoKHM6IGFueSkgPT4gcy5qb2JJbmRleCA9PT0gaW5kZXgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5qb2IsXG4gICAgICAgIHJlbGV2YW5jZVNjb3JlOiBzY29yaW5nPy5zY29yZSB8fCA1MCxcbiAgICAgICAgbWF0Y2hSZWFzb25zOiBzY29yaW5nPy5yZWFzb25zIHx8IFtdXG4gICAgICB9XG4gICAgfSkuc29ydCgoYSwgYikgPT4gKGIucmVsZXZhbmNlU2NvcmUgfHwgMCkgLSAoYS5yZWxldmFuY2VTY29yZSB8fCAwKSlcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0pvYiBzY29yaW5nIGVycm9yOicsIGVycm9yKVxuICAgIHJldHVybiBqb2JzLm1hcChqb2IgPT4gKHsgLi4uam9iLCByZWxldmFuY2VTY29yZTogNTAgfSkpXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJhbXM6IEpvYlNlYXJjaFBhcmFtcyA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG5cbiAgICBpZiAoIXBhcmFtcy5rZXl3b3Jkcykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdLZXl3b3JkcyBhcmUgcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDAgfSlcbiAgICB9XG5cbiAgICAvLyBVc2VyIHByb2ZpbGUgZm9yIEFJIHNjb3JpbmdcbiAgICBjb25zdCB1c2VyUHJvZmlsZSA9IGBTZW5pb3IgdGVjaG5vbG9neSBleGVjdXRpdmUgd2l0aCAyNSsgeWVhcnMgZXhwZXJpZW5jZSBpbiBkYXRhIGVuZ2luZWVyaW5nLCBhbmFseXRpY3MsIEFJL01MLCBhbmQgY2xvdWQgcGxhdGZvcm1zLiBDdXJyZW50bHkgRm91bmRlciAmIEFJIFByb2R1Y3QgTGVhZGVyIGF0IEVxdWl0aSBWZW50dXJlcy4gUHJldmlvdXNseSBTZW5pb3IgRGlyZWN0b3IgYXQgQ2lzY28sIEdsb2JhbCBIZWFkIG9mIERhdGEgYXQgRHJvcGJveC4gRXhwZXJ0aXNlIGluIHNjYWxpbmcgZW5naW5lZXJpbmcgdGVhbXMgKDEwMCsgcGVvcGxlKSwgYnVpbGRpbmcgZGF0YSBwbGF0Zm9ybXMsIGFuZCBsZWFkaW5nIGNvbXBhbmllcyB0aHJvdWdoIElQTy4gTG9va2luZyBmb3IgQy1sZXZlbCBvciBzZW5pb3IgbGVhZGVyc2hpcCByb2xlcyBpbiB0ZWNobm9sb2d5LCBkYXRhLCBvciBBSSBjb21wYW5pZXMuYFxuXG4gICAgLy8gQWdncmVnYXRlIGpvYnMgZnJvbSBtdWx0aXBsZSBzb3VyY2VzXG4gICAgY29uc3QgW1xuICAgICAganNlYXJjaEpvYnMsXG4gICAgICByZW1vdGVPS0pvYnMsXG4gICAgICBhcGlmeUpvYnMsXG4gICAgICBmYW50YXN0aWNKb2JzLFxuICAgICAgYWR6dW5hSm9icyxcbiAgICAgIGdyZWVob3VzZUpvYnMsXG4gICAgICBsZXZlckpvYnNcbiAgICBdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgc2VhcmNoSlNlYXJjaChwYXJhbXMpLFxuICAgICAgc2VhcmNoUmVtb3RlT0socGFyYW1zKSxcbiAgICAgIHNlYXJjaEFwaWZ5KHBhcmFtcyksXG4gICAgICBzZWFyY2hGYW50YXN0aWNKb2JzKHBhcmFtcyksXG4gICAgICBzZWFyY2hBZHp1bmEocGFyYW1zKSxcbiAgICAgIHNlYXJjaEdyZWVuaG91c2UocGFyYW1zKSxcbiAgICAgIHNlYXJjaExldmVyKHBhcmFtcylcbiAgICBdKVxuXG4gICAgbGV0IGFsbEpvYnMgPSBbLi4uanNlYXJjaEpvYnMsIC4uLnJlbW90ZU9LSm9icywgLi4uYXBpZnlKb2JzLCAuLi5mYW50YXN0aWNKb2JzLCAuLi5hZHp1bmFKb2JzLCAuLi5ncmVlaG91c2VKb2JzLCAuLi5sZXZlckpvYnNdXG5cbiAgICAvLyBGaWx0ZXIgYnkgY3JpdGVyaWFcbiAgICBpZiAocGFyYW1zLnJlbW90ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbGxKb2JzID0gYWxsSm9icy5maWx0ZXIoam9iID0+IGpvYi5yZW1vdGUgPT09IHBhcmFtcy5yZW1vdGUpXG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jb21wYW5pZXM/Lmxlbmd0aCkge1xuICAgICAgYWxsSm9icyA9IGFsbEpvYnMuZmlsdGVyKGpvYiA9PlxuICAgICAgICBwYXJhbXMuY29tcGFuaWVzIS5zb21lKGNvbXBhbnkgPT5cbiAgICAgICAgICBqb2IuY29tcGFueS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGNvbXBhbnkudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZXhjbHVkZUNvbXBhbmllcz8ubGVuZ3RoKSB7XG4gICAgICBhbGxKb2JzID0gYWxsSm9icy5maWx0ZXIoam9iID0+XG4gICAgICAgICFwYXJhbXMuZXhjbHVkZUNvbXBhbmllcyEuc29tZShjb21wYW55ID0+XG4gICAgICAgICAgam9iLmNvbXBhbnkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhjb21wYW55LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBieSBVUkxcbiAgICBjb25zdCB1bmlxdWVKb2JzID0gYWxsSm9icy5maWx0ZXIoKGpvYiwgaW5kZXgsIHNlbGYpID0+XG4gICAgICBpbmRleCA9PT0gc2VsZi5maW5kSW5kZXgoaiA9PiBqLnVybCA9PT0gam9iLnVybClcbiAgICApXG5cbiAgICAvLyBTY29yZSBqb2JzIHdpdGggQUlcbiAgICBjb25zdCBzY29yZWRKb2JzID0gYXdhaXQgc2NvcmVKb2JzKHVuaXF1ZUpvYnMsIHVzZXJQcm9maWxlKVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIGpvYnM6IHNjb3JlZEpvYnMsXG4gICAgICB0b3RhbDogc2NvcmVkSm9icy5sZW5ndGgsXG4gICAgICBzb3VyY2VzOiB7XG4gICAgICAgIGpzZWFyY2g6IGpzZWFyY2hKb2JzLmxlbmd0aCxcbiAgICAgICAgcmVtb3Rlb2s6IHJlbW90ZU9LSm9icy5sZW5ndGgsXG4gICAgICAgIGFwaWZ5OiBhcGlmeUpvYnMubGVuZ3RoLFxuICAgICAgICBmYW50YXN0aWM6IGZhbnRhc3RpY0pvYnMubGVuZ3RoLFxuICAgICAgICBhZHp1bmE6IGFkenVuYUpvYnMubGVuZ3RoLFxuICAgICAgICBncmVlbmhvdXNlOiBncmVlaG91c2VKb2JzLmxlbmd0aCxcbiAgICAgICAgbGV2ZXI6IGxldmVySm9icy5sZW5ndGhcbiAgICAgIH0sXG4gICAgICBhcGlVc2FnZToge1xuICAgICAgICBqc2VhcmNoOiB7XG4gICAgICAgICAgdXNlZDoganNlYXJjaFJlcXVlc3RDb3VudCxcbiAgICAgICAgICByZW1haW5pbmc6IE1hdGgubWF4KDAsIDIwMCAtIGpzZWFyY2hSZXF1ZXN0Q291bnQpLFxuICAgICAgICAgIGxpbWl0OiAyMDBcbiAgICAgICAgfSxcbiAgICAgICAgZ2xhc3Nkb29yOiB7XG4gICAgICAgICAgdXNlZDogZ2xhc3Nkb29yUmVxdWVzdENvdW50LFxuICAgICAgICAgIHJlbWFpbmluZzogTWF0aC5tYXgoMCwgMTAwIC0gZ2xhc3Nkb29yUmVxdWVzdENvdW50KSxcbiAgICAgICAgICBsaW1pdDogMTAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignSm9iIHNlYXJjaCBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBzZWFyY2ggam9icycgfSwgeyBzdGF0dXM6IDUwMCB9KVxuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkFudGhyb3BpYyIsImFudGhyb3BpYyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJBTlRIUk9QSUNfQVBJX0tFWSIsImpzZWFyY2hSZXF1ZXN0Q291bnQiLCJnbGFzc2Rvb3JSZXF1ZXN0Q291bnQiLCJzZWFyY2hKU2VhcmNoIiwicGFyYW1zIiwiY29uc29sZSIsImxvZyIsInNlYXJjaFJlbW90ZU9LIiwicmVzcG9uc2UiLCJmZXRjaCIsImRhdGEiLCJqc29uIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9icyIsInNsaWNlIiwiZmlsdGVyIiwiam9iIiwicG9zaXRpb24iLCJrZXl3b3JkcyIsInRvTG93ZXJDYXNlIiwic2VhcmNoVGV4dCIsImNvbXBhbnkiLCJkZXNjcmlwdGlvbiIsImluY2x1ZGVzIiwic3BsaXQiLCJzb21lIiwia2V5d29yZCIsIm1hcCIsImlkIiwidGl0bGUiLCJsb2NhdGlvbiIsInJlbW90ZSIsInNhbGFyeSIsInNhbGFyeV9taW4iLCJzYWxhcnlfbWF4IiwiTWF0aCIsInJvdW5kIiwidW5kZWZpbmVkIiwidXJsIiwic291cmNlIiwicG9zdGVkRGF0ZSIsIkRhdGUiLCJkYXRlIiwidG9JU09TdHJpbmciLCJlcnJvciIsInNlYXJjaEFwaWZ5Iiwic2VhcmNoRmFudGFzdGljSm9icyIsInNlYXJjaEFkenVuYSIsIkFEWlVOQV9BUFBfSUQiLCJBRFpVTkFfQVBQX0tFWSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFwcF9pZCIsImFwcF9rZXkiLCJ3aGF0Iiwid2hlcmUiLCJyZXN1bHRzX3Blcl9wYWdlIiwiZGlzdGFuY2UiLCJyZXN1bHRzIiwiZGlzcGxheV9uYW1lIiwicmVkaXJlY3RfdXJsIiwiY3JlYXRlZCIsInNlYXJjaEdyZWVuaG91c2UiLCJrbm93bkJvYXJkcyIsInNhbXBsZUJvYXJkcyIsImZpbHRlcmVkSm9icyIsImNvbnRlbnQiLCJjb21wYW55Sm9icyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwibmFtZSIsImFic29sdXRlX3VybCIsInVwZGF0ZWRfYXQiLCJwdXNoIiwic2VhcmNoTGV2ZXIiLCJrbm93bkxldmVyQ29tcGFuaWVzIiwic2FtcGxlQ29tcGFuaWVzIiwidGV4dCIsImNhdGVnb3JpZXMiLCJob3N0ZWRVcmwiLCJjcmVhdGVkQXQiLCJzY29yZUpvYnMiLCJ1c2VyUHJvZmlsZSIsInJlbGV2YW5jZVNjb3JlIiwic2NvcmluZ1Byb21wdCIsImkiLCJzdWJzdHJpbmciLCJqb2luIiwibWVzc2FnZXMiLCJjcmVhdGUiLCJtb2RlbCIsIm1heF90b2tlbnMiLCJ0ZW1wZXJhdHVyZSIsInJvbGUiLCJyZXNwb25zZVRleHQiLCJ0eXBlIiwic2NvcmVzIiwiSlNPTiIsInBhcnNlIiwiaW5kZXgiLCJzY29yaW5nIiwiZmluZCIsInMiLCJqb2JJbmRleCIsInNjb3JlIiwibWF0Y2hSZWFzb25zIiwicmVhc29ucyIsInNvcnQiLCJhIiwiYiIsIlBPU1QiLCJyZXF1ZXN0Iiwic3RhdHVzIiwianNlYXJjaEpvYnMiLCJyZW1vdGVPS0pvYnMiLCJhcGlmeUpvYnMiLCJmYW50YXN0aWNKb2JzIiwiYWR6dW5hSm9icyIsImdyZWVob3VzZUpvYnMiLCJsZXZlckpvYnMiLCJQcm9taXNlIiwiYWxsIiwiYWxsSm9icyIsImNvbXBhbmllcyIsImxlbmd0aCIsImV4Y2x1ZGVDb21wYW5pZXMiLCJ1bmlxdWVKb2JzIiwic2VsZiIsImZpbmRJbmRleCIsImoiLCJzY29yZWRKb2JzIiwidG90YWwiLCJzb3VyY2VzIiwianNlYXJjaCIsInJlbW90ZW9rIiwiYXBpZnkiLCJmYW50YXN0aWMiLCJhZHp1bmEiLCJncmVlbmhvdXNlIiwibGV2ZXIiLCJhcGlVc2FnZSIsInVzZWQiLCJyZW1haW5pbmciLCJtYXgiLCJsaW1pdCIsImdsYXNzZG9vciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/job-search/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@anthropic-ai","vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjob-search%2Froute&page=%2Fapi%2Fjob-search%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjob-search%2Froute.ts&appDir=%2FUsers%2Fraviporuri%2Fraviporuri-website%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fraviporuri%2Fraviporuri-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();